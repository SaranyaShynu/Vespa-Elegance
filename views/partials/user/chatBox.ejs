<div id="chatContainer" style="position: fixed; bottom: 80px; right: 20px; width: 320px; height: 450px; border: 1px solid #ccc; background: #fff; display: none; z-index: 1000; box-shadow: 0 0 10px rgba(0,0,0,0.2); border-radius: 10px; overflow: hidden; font-family: Arial, sans-serif;">
  <div id="chatBox" style="height: 380px; overflow-y: auto; padding: 10px; background: #f9f9f9;"></div>
  <div style="display: flex; padding: 5px; border-top: 1px solid #ccc;">
    <input type="text" id="messageInput" placeholder="Type message" style="flex: 1; padding: 8px; border-radius: 4px; border: 1px solid #ccc;">
    <button id="sendBtn" type="button" style="margin-left:5px; padding: 8px 12px; border:none; background:#007bff; color:#fff; border-radius:4px; cursor:pointer;">Send</button>
  </div>
</div>

<button id="openChatBtn" style="position: fixed; bottom: 20px; right: 20px; z-index: 50; background: #007bff; color: #fff; border: none; padding: 14px 18px; border-radius: 50%; cursor: pointer; font-weight:bold;">Chat</button>

<script src="/socket.io/socket.io.js"></script>
<script>
  const socket = io();
  const chatBox = document.getElementById('chatBox');
  const chatContainer = document.getElementById('chatContainer');
  const openChatBtn = document.getElementById('openChatBtn');
  const input = document.getElementById('messageInput');
  const sendBtn = document.getElementById('sendBtn');

  <% if(user) { %>
    const roomId = "<%= user._id %>";
    const senderId = "<%= user._id %>";
    const senderName = "<%= user.name %>";
    socket.emit('joinRoom', roomId);
  <% } else { %>
    const roomId = null;
    const senderId = null;
    const senderName = "Guest";
  <% } %>

  // Format timestamp
  function formatDateTime(dateStr){
    const date = new Date(dateStr);
    const options = { hour: '2-digit', minute: '2-digit', day: '2-digit', month: 'short', year: 'numeric' };
    return date.toLocaleString('en-US', options);
  }

  // Render a single message
  function renderMessage(msg){
    const align = msg.isFromAdmin ? 'left' : 'right';
    const bg = msg.isFromAdmin ? '#d1e7dd' : '#cfe2ff';
    const color = '#000';
    const name = msg.isFromAdmin ? 'Admin' : msg.senderName || 'You';
    const time = formatDateTime(msg.createdAt);
    const p = document.createElement('div');
    p.style.background = bg;
    p.style.color = color;
    p.style.padding = '8px 10px';
    p.style.margin = '5px 0';
    p.style.borderRadius = '10px';
    p.style.maxWidth = '80%';
    p.style.alignSelf = align === 'right' ? 'flex-end' : 'flex-start';
    p.innerHTML = `<strong>${name}:</strong> ${msg.content}<br><small style="color:#555;">${time}</small>`;
    chatBox.appendChild(p);
    chatBox.scrollTop = chatBox.scrollHeight;
  }

  // Open chat and load past messages
  openChatBtn.addEventListener('click', () => {
    chatContainer.style.display = 'flex';
    chatContainer.style.flexDirection = 'column';
    openChatBtn.style.display = 'none';

    if(roomId){
      fetch(`/user/chat/history/${roomId}`)
        .then(res => res.json())
        .then(msgs => {
          chatBox.innerHTML = '';
          msgs.forEach(renderMessage);
        })
        .catch(err => console.error('Failed to fetch chat history', err));
    }
  });

  // Send message
  sendBtn.addEventListener('click', () => {
    const msg = input.value.trim();
    if(!msg || !roomId) return;

    const msgData = { roomId, content: msg, sender: senderId, senderName, isFromAdmin: false };
    socket.emit('chat message', msgData);
    input.value = '';
  });

  // Receive messages
  socket.on('chat message', (msg) => {
    if(!roomId || msg.roomId !== roomId) return;
    renderMessage(msg);
  });
</script>
