<aside class="admin-sidebar" id="adminSidebar">
  <nav>
    <ul class="menu-list">
      <li><a href="/admin/dashboard"><i class="fas fa-tachometer-alt"></i> Dashboard</a></li>
      <li><a href="/admin/users"><i class="fas fa-users"></i> Users</a></li>
      <li><a href="/admin/category"><i class="fas fa-tags"></i> Categories</a></li>
      <li><a href="/admin/products"><i class="fas fa-plus"></i> Products</a></li>
      <li><a href="/admin/service"><i class="fas fa-tools"></i> Services</a></li>
      <li><a href="/admin/orders"><i class="fas fa-box"></i> Orders</a></li>
      <li><a href="/admin/coupons"><i class="fas fa-ticket-alt"></i> Coupons</a></li>
      <li><a href="/admin/feedback"><i class="fas fa-chart-line"></i> Reports</a></li>
      <li><a href="/admin/settings"><i class="fas fa-cog"></i> Settings</a></li>
    </ul>

    <!-- Sidebar widgets -->
    <div class="sidebar-section">
      <h3>Online Users</h3>
      <ul id="onlineUsersList"></ul>
      <hr>
     <!--<h3>Chat Messages</h3>
      <ul id="adminMessages"></ul>
    </div>

     Logout -->
    <div class="sidebar-footer">
      <a href="/admin/logout"><i class="fas fa-sign-out-alt"></i> Logout</a>
    </div>
  </nav>

<script src="/socket.io/socket.io.js"></script>
<script src="/js/adminSocket.js"></script>

<script>
  // Admin sidebar script (must run after DOM loaded)
  (function() {
    const socket = io();
      const adminId = "<%= typeof admin !== 'undefined' && admin ? admin._id : '' %>";
    const adminName = "Admin";

    // Always join adminRoom (dashboard)
    socket.emit('joinAdminRoomForUser', adminId || "dashboard");


    const onlineUsersList = document.getElementById('onlineUsersList');
    const adminMessagesList = document.getElementById('adminMessages');

    // create input + send button once
    const adminInput = document.createElement('input');
    adminInput.id = 'adminInput';
    adminInput.placeholder = 'Type message';
    adminInput.style.width = 'calc(100% - 60px)';
    adminInput.style.marginTop = '8px';

    const sendBtn = document.createElement('button');
    sendBtn.id = 'sendBtn';
    sendBtn.innerText = 'Send';
    sendBtn.style.marginLeft = '6px';
    sendBtn.style.marginTop = '8px';

    // append after adminMessagesList container
    adminMessagesList.parentNode.appendChild(adminInput);
    adminMessagesList.parentNode.appendChild(sendBtn);

    let currentRoom = null;

    // Join admin dashboard room immediately (no admin var required)
    socket.emit('joinAdminDashboard');

    // debug
    socket.on('connect', () => console.log('Admin socket connected', socket.id));
    socket.on('disconnect', () => console.log('Admin socket disconnected'));

    // When server sends updated list
    socket.on('updateOnlineUsers', (users) => {
      console.log('updateOnlineUsers received', users);
      if (!onlineUsersList) return;
      onlineUsersList.innerHTML = '';
      users.forEach(uid => {
        const li = document.createElement('li');
        li.textContent = uid;
        li.style.cursor = 'pointer';
        li.onclick = () => {
          currentRoom = uid;
          adminMessagesList.innerHTML = '';
          // join that user's room (so admin receives direct messages there too)
          socket.emit('joinAdminRoomForUser', uid);

          // fetch chat history
          fetch(`/admin/messages/${uid}`)
            .then(r => r.json())
            .then(msgs => {
              msgs.forEach(m => {
                const li2 = document.createElement('li');
                li2.textContent = `${m.isFromAdmin ? 'Admin' : (m.senderName || 'User')}: ${m.content}`;
                li2.style.background = m.isFromAdmin ? '#d1e7dd' : '#f8d7da';
                li2.style.margin = '4px';
                li2.style.padding = '6px 10px';
                li2.style.borderRadius = '4px';
                adminMessagesList.appendChild(li2);
              });
              adminMessagesList.scrollTop = adminMessagesList.scrollHeight;
            })
            .catch(err => console.error('fetch history failed', err));
        };
        onlineUsersList.appendChild(li);
      });
    });

    // Send message to selected user
    sendBtn.addEventListener('click', () => {
      if (!currentRoom) return alert('Select a user first');
      const content = adminInput.value.trim();
      if (!content) return;
      socket.emit('chat message', {
        roomId: currentRoom,
        sender: '<ADMIN>',            // can be admin id if you want
        senderName: 'Admin',
        content,
        isFromAdmin: true
      });
      adminInput.value = '';
    });

    // Receive messages
    socket.on('chat message', (msg) => {
      // show only messages that belong to currently selected user
      if (!currentRoom || msg.roomId !== currentRoom) return;
      const li = document.createElement('li');
      li.textContent = `${msg.isFromAdmin ? 'Admin' : msg.senderName}: ${msg.content}`;
      li.style.background = msg.isFromAdmin ? '#d1e7dd' : '#f8d7da';
      li.style.margin = '4px';
      li.style.padding = '6px 10px';
      li.style.borderRadius = '4px';
      adminMessagesList.appendChild(li);
      adminMessagesList.scrollTop = adminMessagesList.scrollHeight;
    });
  })();
</script>

</aside>
